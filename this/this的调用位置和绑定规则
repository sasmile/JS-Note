调用位置就是指函数在代码中被调用的位置（不是声明的位置）；
调用栈：为了到达当前执行位置所调用的所有函数；
寻找调用位置最重要的就是分析调用栈，调用位置就在当前正在执行的函数的前一个调用中；
每个函数的this在调用时被绑定，完全取决于函数的调用位置（函数的调用方法）；

this绑定规则
1.默认绑定规则：
  最常用的函数调用类型：独立函数调用。可以看成是无法应用其他规则时的默认规则；
  在代码中，如果函数直接使用不带任何修饰的函数引用进行调用，则只能使用默认绑定；
  应用默认绑定规则的this指向全局对象；
 例：
  function foo(){
     console.log(this.a);
     }
   var a=2;
   foo();//2
 注：如果foo在严格模式下运行this会指向undefined，在严格模式下调用不会影响绑定；
 
2.隐式绑定规则
  当函数的引用有上下文对象时，隐私绑定规则会把函数调用中的this绑定到这个上下文对象；
  例：
  function foo{
      console.log(this.a);
   }
   var obj={
       a:2,
       foo:foo
    };
   obj.foo();//2
   
  对象属性引用链中只由上一层或者说最后一层在调用位置中起作用;
  例：
  function foo(){
      console.log(this.a);
    }
  var obj2={
      a:42,
      foo:foo
   };
  var obj1={
      a:2,
      foo:foo
   };
  obj1.obj2.foo();//42
  隐式绑定的函数会产生丢失绑定对象的现象，这是this会应用默认绑定，指向全局对象或undefined；
  参数传递就是一种隐式赋值，因此传入函数时会被隐式赋值；
  例：
  function foo(){
     console.log(this.a);
  }
  var obj={
      a:2,
      foo:foo
    };
  var bar=obj.foo;
  var a='oops,global';
  bar();//'oops,global'

3.显示绑定
  通过使用call()和apply()方法直接指定this的绑定对象；
  第一个参数为一个对象，在调用函数时将其绑定到this；
  例：
  function foo(){
       console.log();
    }
  var obj={
      a:2
      };
  foo.call(obj);//2
 3.1 硬绑定
    ES5提供的内置的方法 Function.prototype.bind()
    例：
     function foo(something){
          console.log(this.a,something);
          return this.a+something;
      }
     var obj = {
         a:2
      };
     var bar = foo.bind(obj);
     var b = bar(3);//2 3
     console.log(b);//5
   bind(.....)返回一个硬编码的新函数，会把指定的参数设置为this的上下文并调用原始函数；
 3.2 API调用的”上下文“
   第三方库的许多函数，以及JS语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为”上下文“，
   其作用和bind()一样，确保回调函数使用指定的this；

4.new绑定
   new函数调用函数事自动执行的操作：
    1.创建一个全新的对象；
    2.新对象被执行[[Prototype]]连接；
    3.新对象绑定到函数调用的this；
    4.如果函数没有返回其他对象，new表达式中的函数调用会自动返回这个新对象；
   例：
     function foo(a){
        this.a=a;
       }
     var bar = new foo(2);
     console.log(bar.a);//2
   使用new调用foo(...)时，会构造一个新对象并把它绑定到foo(...)调用中的this上；
  
  根据优先级判断this
   1.如果函数在new中调用(new绑定)，this绑定的是新创建的对象；var bar = new foo()
   2.如果函数通过call、apply(显示绑定)或者硬绑定调用，this绑定的时指定的对象；var bar = foo.call(obj2)
   3.如果函数在某个上下文对象中调用（隐式绑定），this绑定的是上下文对象；var bar = boj1.foo()
   4.如果都不是则使用默认绑定，严格模式绑定到undefined，非严格模式绑定到全局对象；var bar = foo()
  
   
